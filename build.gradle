import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.7.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'org.ajoberstar:gradle-git:1.3.0'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'net.nemerosa:versioning:2.5.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.10'
        classpath 'net.nemerosa:versioning:2.5.0'
    }
}

apply plugin: 'base'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'net.nemerosa.versioning'
apply from: 'gradle/idea.gradle'

Date buildTimeAndDate = new Date()
ext {
    buildBy = System.properties['user.name']
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    buildRevision = versioning.info.commit
    buildCreatedBy = "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString()
    projectsWithCoverage = []
    baseJaCocoDir = "${buildDir}/reports/jacoco/test"
    jacocoMergeExecFile = "${baseJaCocoDir}/jacocoTestReport.exec"
    jacocoMergeReportHTMLFile = "${baseJaCocoDir}/html/"
    jacocoMergeReportXMLFile = "${baseJaCocoDir}/jacocoTestReport.xml"
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'org.kordamp.gradle.stats'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = jacocoVersion
    }
}

subprojects { subproj ->
    apply plugin: 'java'
    tasks.withType(JavaCompile) {
        sourceCompatibility = rootProject.sourceCompatibility
        targetCompatibility = rootProject.targetCompatibility
    }

    apply from: rootProject.file('gradle/code-quality.gradle')
    apply plugin: 'info.solidsoft.pitest'

    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'pl.pragmatists:JUnitParams:1.0.5'
    }

    if (subproj.publishJars.toBoolean()) {
        apply from: rootProject.file('gradle/code-coverage.gradle')
        apply from: rootProject.file('gradle/publishing.gradle')

        task sourcesJar(type: Jar) {
            group 'Build'
            description 'An archive of the source code'
            classifier 'sources'
            from sourceSets.main.allSource
        }

        jar.finalizedBy sourcesJar

        artifacts {
            sourcesJar
        }
    }
}

evaluationDependsOnChildren()

task jacocoRootMerge(type: org.gradle.testing.jacoco.tasks.JacocoMerge) {
    dependsOn = projectsWithCoverage.test + projectsWithCoverage.jacocoTestReport
    executionData = files(projectsWithCoverage.jacocoTestReport.executionData)
    destinationFile = file(jacocoMergeExecFile)
}

task jacocoRootMergeReport(dependsOn: jacocoRootMerge, type: JacocoReport) {
    executionData projectsWithCoverage.jacocoTestReport.executionData
    sourceDirectories = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs)
    classDirectories = files(projectsWithCoverage.sourceSets.main.output)

    reports {
        html.enabled = true
        xml.enabled = true
        html.destination = file(jacocoMergeReportHTMLFile)
        xml.destination = file(jacocoMergeReportXMLFile)
    }
}

coveralls {
    sourceDirs = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs).files.absolutePath
}
